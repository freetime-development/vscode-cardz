{"version":3,"sources":["store/cardStore.ts","components/Card.tsx","components/CardsList.tsx","components/StudyNotesInfo.tsx","hooks/useVscodeEvents.ts","components/App.tsx","index.tsx"],"names":["configure","enforceActions","CardsStore","action","bound","note","this","currentStudyNote","lastReview","moment","fromNow","observable","name","Date","cards","title","deck","computed","createContext","Card","className","CardList","map","card","key","observer","cardsContext","useContext","cardsStore","lastReviewedFromNow","vsCodeFunction","Function","useVscodeEvents","history","useHistory","cardStore","useEffect","vsCode","window","addEventListener","event","data","command","payload","setCurrentStudyNote","push","postMessage","App","path","ReactDOM","render","document","getElementById"],"mappings":"uSAIAA,YAAU,CAAEC,eAAgB,a,IAEtBC,G,EAoBDC,IAAOC,M,mMACkBC,G,iEACtBC,KAAKC,iBAAmBF,E,iJAKxB,OAAGC,KAAKC,kBAAoBD,KAAKC,iBAAiBC,WACvCC,IAAOH,KAAKC,iBAAiBC,WAAW,YAAYE,UAEpD,Y,mDA7BdC,K,wEAAgD,CAC7CC,KAAM,4BACNJ,WAAY,IAAIK,KAChBC,MAAO,CACH,CACIC,MAAO,QACPC,KAAM,SAEV,CACID,MAAO,QACPC,KAAM,SAEV,CACID,MAAO,QACPC,KAAM,c,iLAUjBC,K,mFAWUC,0BAAc,IAAIhB,G,QC1BlBiB,EATa,SAAC,GAAqB,IAAnBJ,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClC,OACI,yBAAKI,UAAU,iBACX,yBAAKA,UAAU,aAAaL,GAC5B,yBAAKK,UAAU,aAAaJ,KCSzBK,EAZqB,SAAC,GAAe,IAAbP,EAAY,EAAZA,MACnC,OACI,6BACI,yBAAKM,UAAU,iBACX,yBAAKA,UAAU,uBAAf,eACA,yBAAKA,UAAU,uBAAf,WAEDN,GAASA,EAAMQ,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,iBAAUA,EAAV,CAAiBC,IAAKD,EAAKR,cCYtDU,eAtBY,WACvB,IAAMC,EAAeC,qBAAWC,GAEhC,GAAGF,EAAanB,iBAAkB,CAAC,IAAD,EACNmB,EAAanB,iBAA7BK,EADsB,EACtBA,KAAME,EADgB,EAChBA,MACd,OACI,6BACI,yBAAKM,UAAU,iBACX,yBAAKA,UAAU,uBAAf,UAA4C,0BAAMA,UAAU,cAAcR,GAA1E,KACA,yBAAKQ,UAAU,uBAAf,kBAAoD,0BAAMA,UAAU,cAAeM,EAAaG,qBAAhG,MAEJ,kBAAC,EAAD,CAAUf,MAAOA,KAIzB,OACI,0D,QChBNgB,EAAiBC,SAAS,6HA+BjBC,MAvBf,WAEE,IAAMC,EAAUC,cACVpB,EAAQa,qBAAWQ,GAEzBC,qBAAU,WAER,IAAMC,EAASP,IAEfQ,OAAOC,iBAAiB,WAAW,SAACC,GAAgB,IAAD,EACpBA,EAAMC,KAA3BC,EADyC,EACzCA,QAASC,EADgC,EAChCA,QACjB,GAAgB,eAAZD,EAA0B,CAC5B,IAAMD,EAAkBE,EACxB7B,EAAM8B,oBAAoBH,GAC1BR,EAAQY,KAAK,aAGdR,GACDA,EAAOS,YAAY,CAAEJ,QAAS,YAE/B,CAACT,EAASnB,KCfAiC,EAbO,WAEpB,OADAf,IAEE,6BACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,KAAK,SACV,kBAAC,EAAD,U,MCLZC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.1405f20a.chunk.js","sourcesContent":["import { observable, action, configure, computed  } from 'mobx';\nimport { StudyNote } from './types';\nimport moment from 'moment';\nimport { createContext } from 'react';\nconfigure({ enforceActions: \"observed\" });\n\nclass CardsStore {\n    @observable public currentStudyNote: StudyNote = {\n        name: \"Bayesian machine learning\",\n        lastReview: new Date(),\n        cards: [\n            {\n                title: \"Card1\",\n                deck: \"Deck1\"\n            },\n            {\n                title: \"Card2\",\n                deck: \"Deck1\"\n            },\n            {\n                title: \"Card3\",\n                deck: \"Deck2\"\n            },\n        ]\n    }\n\n    @action.bound\n    async setCurrentStudyNote(note: StudyNote) {\n        this.currentStudyNote = note;\n    }\n\n    @computed\n    get lastReviewedFromNow(): string {\n        if(this.currentStudyNote && this.currentStudyNote.lastReview) {\n            return moment(this.currentStudyNote.lastReview,'YYYYMMDD').fromNow();\n        } else {\n            return \"Never\";\n        }\n    }\n}\nexport { CardsStore };\n\nexport default createContext(new CardsStore());","import React, { FC } from 'react';\n\ninterface CardProps {\n    title: string;\n    deck: string;\n}\n\nconst Card: FC<CardProps> = ({ title, deck }) => {\n    return (\n        <div className=\"flex flex-row\">\n            <div className=\"px-6 py-1\">{title}</div>\n            <div className=\"px-6 py-1\">{deck}</div>\n        </div>\n    )\n}\n\nexport default Card;","import React , { FC } from 'react';\nimport { FlashCard } from '../store/types';\nimport Card from './Card';\n\ninterface CardListProps {\n    cards: FlashCard[]\n}\n\nconst CardList: FC<CardListProps> = ({ cards }) => {\n    return (\n        <div>\n            <div className=\"flex flex-row\">\n                <div className=\"px-6 py-1 font-bold\"> Card Name </div>\n                <div className=\"px-6 py-1 font-bold\"> Deck </div>\n            </div>\n             { cards && cards.map(card => <Card {...card } key={card.title} />) } \n        </div>\n    )\n}\n\nexport default CardList;","import React, { FC, useContext } from 'react';\nimport cardsStore from '../store/cardStore';\nimport { observer } from 'mobx-react-lite';\nimport CardList from './CardsList';\n\nconst StudyNotesInfo: FC = () => {\n    const cardsContext = useContext(cardsStore);\n\n    if(cardsContext.currentStudyNote) {\n        const { name, cards } = cardsContext.currentStudyNote;\n        return (\n            <div>\n                <div className=\"flex flex-row\">\n                    <div className=\"px-4 py-2 font-bold\"> Note: <span className=\"font-light\">{name}</span> </div>\n                    <div className=\"px-4 py-2 font-bold\"> Last reviewed <span className=\"font-light\">{ cardsContext.lastReviewedFromNow }</span> </div>\n                </div>\n                <CardList cards={cards} />\n            </div>\n        );\n    } else {\n        return (\n            <div>No Study note selected</div>\n        )\n    }\n   \n}\n\nexport default observer(StudyNotesInfo);","import cardStore from '../store/cardStore';\nimport { useEffect, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { StudyNote } from '../store/types';\n\nconst vsCodeFunction = Function(`\n  if (typeof acquireVsCodeApi === 'function') {\n    return acquireVsCodeApi();\n  } else {\n    return undefined;\n  }`\n);\n\nfunction useVscodeEvents(){\n\n  const history = useHistory();\n  const cards = useContext(cardStore)\n\n  useEffect(() => {\n\n    const vsCode = vsCodeFunction();\n  \n    window.addEventListener('message', (event: any) => {\n      const { command, payload } = event.data;\n      if (command === 'study_note') {\n        const data: StudyNote = payload;\n        cards.setCurrentStudyNote(data);\n        history.push(\"/info\")\n      }\n    });\n    if(vsCode) {\n      vsCode.postMessage({ command: 'ready' });\n    }\n  }, [history, cards]);\n}\n\nexport default useVscodeEvents;","import React from 'react';\nimport StudyNotesInfo from './StudyNotesInfo';\nimport { Route, Switch } from 'react-router-dom';\nimport useVscodeEvents from '../hooks/useVscodeEvents';\n\nconst App: React.FC = () => {\n  useVscodeEvents();\n  return (\n    <div>\n        <Switch>\n          <Route path=\"/info\">\n            <StudyNotesInfo />\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/tailwind.css';\nimport { BrowserRouter, MemoryRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <MemoryRouter>\n        <App />\n    </MemoryRouter>,\n    document.getElementById('root')\n);"],"sourceRoot":""}